#textdomain wesnoth-swamplings

#define MULTI_SPEAR_SOUNDS
    [event]
        name=attacker hits
        first_time_only=no
        [filter]
            has_weapon="multi spear (arcanic)"
            #		[filter_attack]
            #			type=arcane
            #	        weapon="multi spear"
            #		[/filter_attack]
        [/filter]
        [sound]
            name=magic-missile-3.ogg
        [/sound]
    [/event]
    [event]
        name=attacker hits
        first_time_only=no
        [filter]
            has_weapon="multi spear (arctic)"
            #		[filter_attack]
            #			type=cold
            #	        weapon="multi spear"
            #		[/filter_attack]
        [/filter]
        [sound]
            name=magic-faeriefire.ogg
        [/sound]
    [/event]
    [event]
        name=attacker hits
        first_time_only=no
        [filter]
            has_weapon="multi spear (volcanic)"
            #		[filter_attack]
            #			type=fire
            #	        weapon="multi spear"
            #		[/filter_attack]
        [/filter]
        [sound]
            name=flame-big.ogg
        [/sound]
    [/event]
#enddef

# variable array of nonspeaking unit types. Necessary because some "wolves" can speak (i.e., Wolf Riders):
# TODO use this somewhere:
#define NONSPEAKING_TYPES
    [set_variable]
        name=nonspeaking_types[0].type
        value=Vampire Bat
    [/set_variable]
    [set_variable]
        name=nonspeaking_types[1].type
        value=Blood Bat
    [/set_variable]
    [set_variable]
        name=nonspeaking_types[2].type
        value=Dread Bat
    [/set_variable]
    [set_variable]
        name=nonspeaking_types[3].type
        value=Swamp Wolf
    [/set_variable]
    [set_variable]
        name=nonspeaking_types[4].type
        value=Great Wolf
    [/set_variable]
    [set_variable]
        name=nonspeaking_types[5].type
        value=Direwolf
    [/set_variable]
#enddef

# found this one in "FrankenWML":
#define GHOST_APPEAR X Y IMAGE FADE_IN_MS
    # Materializes the given image as a partially transparent, colorless ghost
    # at the given location. Uses FADE_IN_MS milliseconds per frame.
    [scroll_to]
        x,y={X},{Y}
    [/scroll_to]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.1)~GS()"
    [/item]
    [delay]
        time={FADE_IN_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.1)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.2)~GS()"
    [/item]
    [delay]
        time={FADE_IN_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.2)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.3)~GS()"
    [/item]
    [delay]
        time={FADE_IN_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.3)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.4)~GS()"
    [/item]
    [delay]
        time={FADE_IN_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.4)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.5)~GS()"
    [/item]

    [delay]
        time={FADE_IN_MS}
    [/delay]
    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.5)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.6)~GS()"
    [/item]
#enddef

# also from FrankenWML:
#define GHOST_FADE X Y IMAGE FADE_OUT_MS
    # Dematerializes the ghost at the given location (IMAGE must be the same as
    # for the call to GHOST_APPEAR). Uses FADE_OUT_MS milliseconds per frame.
    [scroll_to]
        x,y={X},{Y}
    [/scroll_to]
    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.6)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.5)~GS()"
    [/item]
    [delay]
        time={FADE_OUT_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.5)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.4)~GS()"
    [/item]
    [delay]
        time={FADE_OUT_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.4)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.3)~GS()"
    [/item]
    [delay]
        time={FADE_OUT_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.3)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.2)~GS()"
    [/item]
    [delay]
        time={FADE_OUT_MS}
    [/delay]

    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.2)~GS()"
    [/remove_item]
    [item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.1)~GS()"
    [/item]

    [delay]
        time={FADE_OUT_MS}
    [/delay]
    [remove_item]
        x,y={X},{Y}
        image="{IMAGE}~O(0.1)~GS()"
    [/remove_item]
#enddef

#define DIREWOLF_ADVANCEMENT
    # in latter scenarios, Goblin Knights can advance to Direwolf Riders and Great Wolves can advance to Direwolves:
    [event]
        name=post advance
        first_time_only=no

        [filter]
            type=Goblin Knight 1Sw
        [/filter]

        {MODIFY_UNIT (type=Goblin Knight 1Sw) type (Goblin Knight 2Sw)}
    [/event]
    [event]
        name=post advance
        first_time_only=no

        [filter]
            type=Great Wolf
        [/filter]

        {MODIFY_UNIT (type=Great Wolf) type (Great Wolf 2)}
    [/event]
    [event]
        name=recall
        first_time_only=no

        [filter]
            type=Goblin Knight 1Sw
        [/filter]

        {MODIFY_UNIT (type=Goblin Knight 1Sw) type (Goblin Knight 2Sw)}
    [/event]
    [event]
        name=recall
        first_time_only=no

        [filter]
            type=Wolf Rider Sw
        [/filter]

        {MODIFY_UNIT (type=Wolf Rider Sw) type (Wolf Rider 2Sw)}
    [/event]
    [event]
        name=recall
        first_time_only=no

        [filter]
            type=Great Wolf
        [/filter]

        {MODIFY_UNIT (type=Great Wolf) type (Great Wolf 2)}
    [/event]
#enddef

#define CLAMMIE_DIREWOLF_LEADER_ADVANCEMENT
    # When Clammie advances from Direwolf Rider to Direwolf Master, his leadership level increases to 4:

    [event]
        name=post advance
        first_time_only=no

        [filter]
            id=Clammie
            type=Direwolf Master
        [/filter]

        [object]
            [filter]
                id=Clammie
            [/filter]
            silent=yes
            duration=forever
            [effect]
                apply_to=remove_ability
                [abilities]
                    {ABILITY_LEADERSHIP_LEVEL_3}
                [/abilities]
            [/effect]
            [effect]
                apply_to=new_ability
                [abilities]
                    {ABILITY_LEADERSHIP_LEVEL_4}
                [/abilities]
            [/effect]
        [/object]
    [/event]
#enddef

#define MOVE_UNIT_NO_SCROLL FILTER TO_X TO_Y
    # Same as the MOVE_UNIT macro, without the annoying scroll (used in 1.8, not 1.9):
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        variable=MOVE_UNIT_temp
        kill=no
    [/store_unit]

    {VARIABLE_OP MOVE_UNIT_path_coords_x format ("$MOVE_UNIT_temp.x|,{TO_X}")}
    {VARIABLE_OP MOVE_UNIT_path_coords_y format ("$MOVE_UNIT_temp.y|,{TO_Y}")}

    [if]
        [variable]
            name=MOVE_UNIT_temp.x
            less_than={TO_X}
        [/variable]

        [then]
            {VARIABLE MOVE_UNIT_temp.facing se}
        [/then]

        [else]
            [if]
                [variable]
                    name=MOVE_UNIT_temp.x
                    greater_than={TO_X}
                [/variable]

                [then]
                    {VARIABLE MOVE_UNIT_temp.facing sw}
                [/then]
            [/if]
        [/else]
    [/if]

    {VARIABLE MOVE_UNIT_temp.x {TO_X}}
    {VARIABLE MOVE_UNIT_temp.y {TO_Y}}

    [kill]
        {FILTER}

        animate=no
        fire_event=no
    [/kill]

    [move_unit_fake]
        type=$MOVE_UNIT_temp.type
        gender=$MOVE_UNIT_temp.gender
        variation=$MOVE_UNIT_temp.variation
        side=$MOVE_UNIT_temp.side
        x=$MOVE_UNIT_path_coords_x
        y=$MOVE_UNIT_path_coords_y
    [/move_unit_fake]

    [unstore_unit]
        variable=MOVE_UNIT_temp
        find_vacant=yes
    [/unstore_unit]

    [redraw][/redraw]
    {CLEAR_VARIABLE MOVE_UNIT_temp}
    {CLEAR_VARIABLE MOVE_UNIT_path_coords_x}
    {CLEAR_VARIABLE MOVE_UNIT_path_coords_y}
#enddef

#define MISRIS_RECRUITING_FIX
    [event]
        name=recall
        [filter]
            id=Misris
        [/filter]

        {MODIFY_UNIT id=Misris overlays "misc/hero-icon.png"}
        {MODIFY_UNIT id=Misris canrecruit no}
    [/event]
#enddef

# current implementation of this mainline macro is bugged!
#define CLEAR_FOG_NOBUG SIDE X Y RADIUS
    # Clears fog in a specific area for the given side. This is to be used only
    # for the duration of an event: always use {UNCLEAR_FOG} (below) before the
    # event exits, or otherwise you'll be left with fake fog clearer units on
    # the map.
    [if]
        [have_unit]
            type=Fog Clearer
        [/have_unit]

        [then]
            [set_variable]
                name=fog_clearer_i
                add=1
            [/set_variable]
        [/then]

        [else]
            [set_variable]
                name=fog_clearer_i
                value=1
            [/set_variable]
        [/else]
    [/if]

    [unit]
        side={SIDE}
        type=Fog Clearer
        id=fog_clearer_$fog_clearer_i
        x,y={X},{Y}
        max_moves={RADIUS}
    [/unit]

    [store_unit]
        [filter]
            id=fog_clearer_$fog_clearer_i
        [/filter]

        kill=no
        variable=new_fog_clearer
    [/store_unit]

    [hide_unit]
        x,y=$new_fog_clearer.x,$new_fog_clearer.y
    [/hide_unit]

    [redraw]
        side={SIDE}
    [/redraw]

#enddef

#define UNCLEAR_FOG_NOBUG
    # Restores fog that was temporarily cleared (check CLEAR_FOG above). Only
    # one UNCLEAR_FOG is required no matter how many times CLEAR_FOG was used.
    [kill]
        type=Fog Clearer
        animate=no
        fire_event=no
    [/kill]

    [clear_variable]
        name=fog_clearer_i
    [/clear_variable]

    [clear_variable]
        name=new_fog_clearer
    [/clear_variable]
#enddef

#define MOVE_UNIT_BY_NO_KILL FILTER OFFSET_X OFFSET_Y
    #TODO COMMENT
    [store_unit]
        [filter]
            {FILTER}
        [/filter]

        variable=MOVE_UNIT_store
        kill=yes
    [/store_unit]

    {VARIABLE_OP MOVE_UNIT_store.x add {OFFSET_X}}
    {VARIABLE_OP MOVE_UNIT_store.y add {OFFSET_Y}}
    [unstore_unit]
        variable=MOVE_UNIT_store
        find_vacant=yes
    [/unstore_unit]
    {CLEAR_VARIABLE MOVE_UNIT_store}
#enddef

#define MISRIS_PORTRAIT
    [event]
        name=new turn
    	first_time_only=no

		[if]
            [have_location]
                time_of_day=chaotic
			[/have_location]

	        [then]
		        {MODIFY_UNIT id=Misris profile "portraits/transparent/misris-night.png"}
	        [/then]
	        [else]
		        {MODIFY_UNIT id=Misris profile "portraits/transparent/misris-day.png"}
			[/else]
        [/if]
    [/event]
#enddef

#define EEEP_PORTRAIT
    [event]
        name=new turn
    	first_time_only=no

		[if]
            [have_location]
                time_of_day=chaotic
			[/have_location]

	        [then]
		        {MODIFY_UNIT id=Eeep profile "portraits/transparent/eeep-and-wolf-night.png"}
	        [/then]
	        [else]
		        {MODIFY_UNIT id=Eeep profile "portraits/transparent/eeep-and-wolf-day.png"}
			[/else]
        [/if]
    [/event]
#enddef

#define TELEPORT_WITH_SCROLLTO FROM_X FROM_Y TO_X TO_Y
    [event]
        name=moveto
        first_time_only=no

        [filter]
            x,y={FROM_X},{FROM_Y}
        [/filter]

	    {TELEPORT_UNIT (x,y={FROM_X},{FROM_Y}) {TO_X} {TO_Y}}

	    [sound]
        name=magic-holy-miss-4.ogg
	    [/sound]

		[scroll_to]
			x,y={TO_X},{TO_Y}
		[/scroll_to]
    [/event]
    [event]
        name=moveto
        first_time_only=no

        [filter]
            x,y={TO_X},{TO_Y}
        [/filter]

	    {TELEPORT_UNIT (x,y={TO_X},{TO_Y}) {FROM_X} {FROM_Y}}

	    [sound]
        name=magic-holy-miss-4.ogg
	    [/sound]

		[scroll_to]
			x,y={FROM_X},{FROM_Y}
		[/scroll_to]
    [/event]
#enddef

#define STATUES_CAN_TELEPORT
	{TELEPORT_WITH_SCROLLTO 23 9 1 3}
	{TELEPORT_WITH_SCROLLTO 19 8 25 35}
	{TELEPORT_WITH_SCROLLTO 27 21 31 21}
	{TELEPORT_WITH_SCROLLTO 31 19 47 21}
	{TELEPORT_WITH_SCROLLTO 47 21 31 19}
	{TELEPORT_WITH_SCROLLTO 55 4 27 19}
	{TELEPORT_WITH_SCROLLTO 25 33 30 18}
	{TELEPORT_WITH_SCROLLTO 49 30 28 18}
	{TELEPORT_WITH_SCROLLTO 31 37 29 22}
	{TELEPORT_WITH_SCROLLTO 27 37 15 12}
#enddef

#define PULL_LEVER_OPTION
	[message]
		# TODO check for bats n wolves!
		speaker=unit
		message= _ "There's a lever on the back! Should I push it?"
		[option]
			message= _ "Yes, that would be wise indeed!"
			[command]
				[sound]
					name=club.ogg
				[/sound]

				[remove_item]
					x,y=1,3
				[/remove_item]

				# glow to all statues:
				[item]
					x,y=15,12
					image=items/soothsayer-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=27,37
					image=items/soothsayer-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=29,22
					image=items/soothsayer-statue-e.png~CS(100,100,100)
				[/item]
				[item]
					x,y=31,37
					image=items/soothsayer-statue-e.png~CS(100,100,100)
				[/item]
				[item]
					x,y=27,21
					image=items/ambusher-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=31,21
					image=items/ambusher-statue-e.png~CS(100,100,100)
				[/item]
				[item]
					x,y=27,19
					image=items/enchantress-statue-e.png~CS(100,100,100)
				[/item]
				[item]
					x,y=55,4
					image=items/enchantress-statue-e.png~FL(horiz)~CS(100,100,100)
				[/item]
				[item]
					x,y=31,19
					image=items/revenant-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=47,21
					image=items/revenant-statue-w.png~FL(horiz)~CS(100,100,100)
				[/item]
				[item]
					x,y=25,33
					image=items/halberdier-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=30,18
					image=items/halberdier-statue-w.png~FL(horiz)~CS(100,100,100)
				[/item]
				[item]
					x,y=49,30
					image=items/myrmidon-statue-w.png~CS(100,100,100)
				[/item]
				[item]
					x,y=28,18
					image=items/myrmidon-statue-w.png~FL(horiz)~CS(100,100,100)
				[/item]
				[item]
					x,y=25,35
					image=items/flanker-statue-e.png~FL(horiz)~CS(100,100,100)
				[/item]

				[item]
					x,y=1,3
					image=items/dragonstatue.png~CS(100,100,100)
				[/item]

				[redraw]
				[/redraw]

				[message]
					speaker=Clammie
					message= _ "That seems to have done something to all the statues!"
				[/message]
				[message]
					speaker=unit
					message= _ "They <i>are</i> made of holes … oh!"
				[/message]

				{TELEPORT_UNIT x,y=1,3 23 9}

				[sound]
					name=magic-holy-miss-4.ogg
				[/sound]

				[scroll_to]
					x,y=23,9
				[/scroll_to]

				{STATUES_CAN_TELEPORT}
			[/command]
		[/option]

		[option]
			message= _ "NO!"
			[command]
				[allow_undo]
				[/allow_undo]

				[fire_event]
					name=second_chance
				[/fire_event]
			[/command]
		[/option]
	[/message]
#enddef

#define HIGHLIGHT_GOHERE X Y BACKGROUND_VALUE
	# This flashes much more quickly and does not leave the gohere item when finished:
    # Scrolls to the given location, blinks the given image in and out a few
    # times, and then leaves the image in place. Use this to pinpoint an
    # important location to the player. If there's an existing [item] on the
    # location, specify it as the BACKGROUND_VALUE or else it'll get lost
    # during the blinking.
    [scroll_to]
        x,y={X},{Y}
        check_fogged=false
    [/scroll_to]
    [item]
        x,y={X},{Y}
        halo=items/gohere.png
    [/item]
    [redraw][/redraw]
    [delay]
        time=150
    [/delay]
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
    [item]
        x,y={X},{Y}
        image={BACKGROUND_VALUE}
    [/item]
    [redraw][/redraw]
    [delay]
        time=150
    [/delay]
    [item]
        x,y={X},{Y}
        halo=items/gohere.png
    [/item]
    [redraw][/redraw]
    [delay]
        time=150
    [/delay]
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
    [item]
        x,y={X},{Y}
        image={BACKGROUND_VALUE}
    [/item]
    [redraw][/redraw]
    [delay]
        time=150
    [/delay]
    [item]
        x,y={X},{Y}
        halo=items/gohere.png
    [/item]
    [redraw][/redraw]
    [delay]
        time=150
    [/delay]
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
    [item]
        x,y={X},{Y}
        image={BACKGROUND_VALUE}
    [/item]
    [redraw][/redraw]
#enddef
